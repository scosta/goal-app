/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/goals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all goals for the authenticated user
         * @description Retrieves all goals belonging to the authenticated user
         */
        get: operations["listGoals"];
        put?: never;
        /**
         * Create a new daily recurring goal
         * @description Creates a new goal with daily recurrence tracking
         */
        post: operations["createGoal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get progress data for a specific month
         * @description Retrieves progress data for a month, including totals per goal and success rate
         */
        get: operations["getProgress"];
        put?: never;
        /**
         * Record daily time spent on a goal
         * @description Records the time spent on a goal for a specific date. The server computes whether the daily target was met.
         */
        post: operations["recordProgress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get yearly summary with monthly success rates and streaks
         * @description Retrieves a yearly summary including aggregated monthly success rates and streaks
         */
        get: operations["getYearlySummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Goal: {
            /**
             * @description Unique identifier for the goal
             * @example goal_abc123
             */
            id: string;
            /**
             * @description ID of the user who owns the goal
             * @example user123
             */
            userId: string;
            /**
             * @description Title of the goal
             * @example Learn Spanish
             */
            title: string;
            /**
             * @description Detailed description of the goal
             * @example Practice Spanish conversation and grammar daily
             */
            description?: string;
            /**
             * @description Target number of minutes to spend on this goal per day
             * @example 30
             */
            targetMinutesPerDay: number;
            /**
             * Format: date
             * @description Start date of the goal
             * @example 2025-10-05
             */
            startDate: string;
            /**
             * Format: date
             * @description Optional end date of the goal
             * @example 2025-12-31
             */
            endDate?: string;
            /**
             * @description Tags for categorizing the goal
             * @example [
             *       "language",
             *       "learning"
             *     ]
             */
            tags?: string[];
            /**
             * Format: date-time
             * @description Timestamp when the goal was created
             * @example 2025-10-05T10:30:00Z
             */
            createdAt: string;
        };
        Progress: {
            /**
             * @description Unique identifier for the progress entry
             * @example progress_xyz789
             */
            id: string;
            /**
             * @description ID of the goal this progress is for
             * @example goal_abc123
             */
            goalId: string;
            /**
             * Format: date
             * @description Date for which progress was recorded
             * @example 2025-10-05
             */
            date: string;
            /**
             * @description Number of minutes spent on the goal
             * @example 45
             */
            minutesSpent: number;
            /**
             * @description Optional note about the progress
             * @example Completed two lessons on verb conjugation
             */
            note?: string;
            /**
             * @description Whether the daily target was met (computed by server)
             * @example true
             */
            targetMet: boolean;
            /**
             * Format: date-time
             * @description Timestamp when the progress was recorded
             * @example 2025-10-05T14:30:00Z
             */
            createdAt: string;
        };
        MonthlyProgressReport: {
            /**
             * @description The month this report covers (YYYY-MM format)
             * @example 2025-10
             */
            month: string;
            /** @description Progress data aggregated by goal */
            goalProgress: {
                goal: components["schemas"]["Goal"];
                /**
                 * @description Total minutes spent on this goal during the month
                 * @example 450
                 */
                totalMinutesSpent: number;
                /**
                 * @description Total target minutes for this goal during the month
                 * @example 600
                 */
                totalTargetMinutes: number;
                /**
                 * @description Number of days with recorded progress
                 * @example 15
                 */
                daysTracked: number;
                /**
                 * @description Number of days where the daily target was met
                 * @example 12
                 */
                daysTargetMet: number;
                /**
                 * Format: float
                 * @description Percentage of tracked days where target was met
                 * @example 80
                 */
                successRate: number;
                /** @description Day-by-day progress entries for this goal */
                dailyProgress?: components["schemas"]["Progress"][];
                /** @description Current streak for this specific goal */
                currentStreak?: {
                    /**
                     * @example daily_target_met
                     * @enum {string}
                     */
                    type?: "daily_target_met" | "daily_progress_recorded";
                    /** @example 7 */
                    days?: number;
                    /**
                     * Format: date
                     * @example 2025-10-01
                     */
                    startDate?: string;
                    /**
                     * Format: date
                     * @example 2025-10-07
                     */
                    endDate?: string;
                };
                /** @description Longest streak for this specific goal during the month */
                longestStreak?: {
                    /**
                     * @example daily_target_met
                     * @enum {string}
                     */
                    type?: "daily_target_met" | "daily_progress_recorded";
                    /** @example 15 */
                    days?: number;
                    /**
                     * Format: date
                     * @example 2025-10-01
                     */
                    startDate?: string;
                    /**
                     * Format: date
                     * @example 2025-10-15
                     */
                    endDate?: string;
                };
            }[];
            overallStats: {
                /**
                 * @description Total minutes spent across all goals
                 * @example 900
                 */
                totalMinutesSpent: number;
                /**
                 * @description Number of goals tracked during the month
                 * @example 3
                 */
                totalGoals: number;
            };
        };
        YearlySummary: {
            /**
             * @description The year this summary covers (YYYY format)
             * @example 2025
             */
            year: string;
            /** @description Monthly success rates and statistics */
            monthlyData: {
                /**
                 * @description Month in YYYY-MM format
                 * @example 2025-01
                 */
                month: string;
                /**
                 * Format: float
                 * @description Overall success rate for the month
                 * @example 78.5
                 */
                successRate: number;
                /**
                 * @description Total minutes spent across all goals
                 * @example 1200
                 */
                totalMinutesSpent: number;
                /**
                 * @description Number of goals tracked in this month
                 * @example 3
                 */
                goalsTracked: number;
                /** @description Goal with highest success rate in this month */
                bestPerformingGoal?: {
                    /** @example goal_abc123 */
                    goalId?: string;
                    /** @example Learn Spanish */
                    goalTitle?: string;
                    /**
                     * Format: float
                     * @example 90
                     */
                    successRate?: number;
                };
            }[];
            overallStats: {
                /**
                 * @description Total minutes spent across all goals for the year
                 * @example 14400
                 */
                totalMinutesSpent: number;
                /**
                 * Format: float
                 * @description Average success rate across all months
                 * @example 72.3
                 */
                averageSuccessRate: number;
                /** @description Month with highest success rate */
                bestMonth: {
                    /** @example 2025-06 */
                    month?: string;
                    /**
                     * Format: float
                     * @example 85
                     */
                    successRate?: number;
                };
                /** @description Month with lowest success rate */
                worstMonth: {
                    /** @example 2025-02 */
                    month?: string;
                    /**
                     * Format: float
                     * @example 45
                     */
                    successRate?: number;
                };
            };
        };
        Error: {
            /**
             * @description Error message
             * @example Invalid request
             */
            message: string;
            /**
             * @description Error code
             * @example INVALID_INPUT
             */
            code?: string;
        };
    };
    responses: {
        /** @description Bad request - invalid input data */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized - authentication required */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Too many requests - rate limit exceeded */
        TooManyRequests: {
            headers: {
                /**
                 * @description The maximum number of requests allowed in the time window
                 * @example 100
                 */
                "X-RateLimit-Limit"?: number;
                /**
                 * @description The number of requests remaining in the current time window
                 * @example 0
                 */
                "X-RateLimit-Remaining"?: number;
                /**
                 * @description The time at which the rate limit resets (Unix timestamp)
                 * @example 1696512000
                 */
                "X-RateLimit-Reset"?: number;
                /**
                 * @description Number of seconds to wait before retrying
                 * @example 60
                 */
                "Retry-After"?: number;
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Rate limit exceeded. Please try again later.",
                 *       "code": "RATE_LIMIT_EXCEEDED"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listGoals: {
        parameters: {
            query?: {
                /**
                 * @description Filter goals by tags (comma-separated)
                 * @example language,learning
                 */
                tags?: string;
                /**
                 * @description Filter by active goals (those within start/end date range)
                 * @example true
                 */
                active?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of goals retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        goals?: components["schemas"]["Goal"][];
                        /**
                         * @description Total number of goals
                         * @example 5
                         */
                        total?: number;
                    };
                };
            };
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createGoal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description ID of the user creating the goal
                     * @example user123
                     */
                    userId: string;
                    /**
                     * @description Title of the goal
                     * @example Learn Spanish
                     */
                    title: string;
                    /**
                     * @description Detailed description of the goal
                     * @example Practice Spanish conversation and grammar daily
                     */
                    description?: string;
                    /**
                     * @description Target number of minutes to spend on this goal per day
                     * @example 30
                     */
                    targetMinutesPerDay: number;
                    /**
                     * Format: date
                     * @description Start date of the goal
                     * @example 2025-10-05
                     */
                    startDate: string;
                    /**
                     * Format: date
                     * @description Optional end date of the goal
                     * @example 2025-12-31
                     */
                    endDate?: string;
                    /**
                     * @description Tags for categorizing the goal
                     * @example [
                     *       "language",
                     *       "learning"
                     *     ]
                     */
                    tags?: string[];
                };
            };
        };
        responses: {
            /** @description Goal created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Goal"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getProgress: {
        parameters: {
            query: {
                /**
                 * @description Month to retrieve progress for (format YYYY-MM)
                 * @example 2025-10
                 */
                month: string;
                /**
                 * @description Optional filter to get progress for a specific goal only
                 * @example goal_abc123
                 */
                goalId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Progress data retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonthlyProgressReport"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
        };
    };
    recordProgress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description ID of the goal this progress is for
                     * @example goal_abc123
                     */
                    goalId: string;
                    /**
                     * Format: date
                     * @description Date for which progress is being recorded
                     * @example 2025-10-05
                     */
                    date: string;
                    /**
                     * @description Number of minutes spent on the goal
                     * @example 45
                     */
                    minutesSpent: number;
                    /**
                     * @description Optional note about the progress
                     * @example Completed two lessons on verb conjugation
                     */
                    note?: string;
                };
            };
        };
        responses: {
            /** @description Progress recorded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Progress"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getYearlySummary: {
        parameters: {
            query: {
                /**
                 * @description Year to retrieve summary for (format YYYY)
                 * @example 2025
                 */
                year: string;
                /**
                 * @description Optional filter to get summary for a specific goal only
                 * @example goal_abc123
                 */
                goalId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Yearly summary retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["YearlySummary"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            429: components["responses"]["TooManyRequests"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
