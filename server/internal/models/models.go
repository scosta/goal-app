// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package openapi

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for MonthlyProgressReportGoalProgressCurrentStreakType.
const (
	MonthlyProgressReportGoalProgressCurrentStreakTypeDailyProgressRecorded MonthlyProgressReportGoalProgressCurrentStreakType = "daily_progress_recorded"
	MonthlyProgressReportGoalProgressCurrentStreakTypeDailyTargetMet        MonthlyProgressReportGoalProgressCurrentStreakType = "daily_target_met"
)

// Defines values for MonthlyProgressReportGoalProgressLongestStreakType.
const (
	MonthlyProgressReportGoalProgressLongestStreakTypeDailyProgressRecorded MonthlyProgressReportGoalProgressLongestStreakType = "daily_progress_recorded"
	MonthlyProgressReportGoalProgressLongestStreakTypeDailyTargetMet        MonthlyProgressReportGoalProgressLongestStreakType = "daily_target_met"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code *string `json:"code,omitempty"`

	// Message Error message
	Message string `json:"message"`
}

// Goal defines model for Goal.
type Goal struct {
	// CreatedAt Timestamp when the goal was created
	CreatedAt time.Time `json:"createdAt"`

	// Description Detailed description of the goal
	Description *string `json:"description,omitempty"`

	// EndDate Optional end date of the goal
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// Id Unique identifier for the goal
	Id string `json:"id"`

	// StartDate Start date of the goal
	StartDate openapi_types.Date `json:"startDate"`

	// Tags Tags for categorizing the goal
	Tags *[]string `json:"tags,omitempty"`

	// TargetMinutesPerDay Target number of minutes to spend on this goal per day
	TargetMinutesPerDay int `json:"targetMinutesPerDay"`

	// Title Title of the goal
	Title string `json:"title"`

	// UserId ID of the user who owns the goal
	UserId string `json:"userId"`
}

// MonthlyProgressReport defines model for MonthlyProgressReport.
type MonthlyProgressReport struct {
	// GoalProgress Progress data aggregated by goal
	GoalProgress []struct {
		// CurrentStreak Current streak for this specific goal
		CurrentStreak *struct {
			Days      *int                                                `json:"days,omitempty"`
			EndDate   *openapi_types.Date                                 `json:"endDate,omitempty"`
			StartDate *openapi_types.Date                                 `json:"startDate,omitempty"`
			Type      *MonthlyProgressReportGoalProgressCurrentStreakType `json:"type,omitempty"`
		} `json:"currentStreak,omitempty"`

		// DailyProgress Day-by-day progress entries for this goal
		DailyProgress *[]Progress `json:"dailyProgress,omitempty"`

		// DaysTargetMet Number of days where the daily target was met
		DaysTargetMet int `json:"daysTargetMet"`

		// DaysTracked Number of days with recorded progress
		DaysTracked int  `json:"daysTracked"`
		Goal        Goal `json:"goal"`

		// LongestStreak Longest streak for this specific goal during the month
		LongestStreak *struct {
			Days      *int                                                `json:"days,omitempty"`
			EndDate   *openapi_types.Date                                 `json:"endDate,omitempty"`
			StartDate *openapi_types.Date                                 `json:"startDate,omitempty"`
			Type      *MonthlyProgressReportGoalProgressLongestStreakType `json:"type,omitempty"`
		} `json:"longestStreak,omitempty"`

		// SuccessRate Percentage of tracked days where target was met
		SuccessRate float32 `json:"successRate"`

		// TotalMinutesSpent Total minutes spent on this goal during the month
		TotalMinutesSpent int `json:"totalMinutesSpent"`

		// TotalTargetMinutes Total target minutes for this goal during the month
		TotalTargetMinutes int `json:"totalTargetMinutes"`
	} `json:"goalProgress"`

	// Month The month this report covers (YYYY-MM format)
	Month        string `json:"month"`
	OverallStats struct {
		// TotalGoals Number of goals tracked during the month
		TotalGoals int `json:"totalGoals"`

		// TotalMinutesSpent Total minutes spent across all goals
		TotalMinutesSpent int `json:"totalMinutesSpent"`
	} `json:"overallStats"`
}

// MonthlyProgressReportGoalProgressCurrentStreakType defines model for MonthlyProgressReport.GoalProgress.CurrentStreak.Type.
type MonthlyProgressReportGoalProgressCurrentStreakType string

// MonthlyProgressReportGoalProgressLongestStreakType defines model for MonthlyProgressReport.GoalProgress.LongestStreak.Type.
type MonthlyProgressReportGoalProgressLongestStreakType string

// Progress defines model for Progress.
type Progress struct {
	// CreatedAt Timestamp when the progress was recorded
	CreatedAt time.Time `json:"createdAt"`

	// Date Date for which progress was recorded
	Date openapi_types.Date `json:"date"`

	// GoalId ID of the goal this progress is for
	GoalId string `json:"goalId"`

	// Id Unique identifier for the progress entry
	Id string `json:"id"`

	// MinutesSpent Number of minutes spent on the goal
	MinutesSpent int `json:"minutesSpent"`

	// Note Optional note about the progress
	Note *string `json:"note,omitempty"`

	// TargetMet Whether the daily target was met (computed by server)
	TargetMet bool `json:"targetMet"`
}

// YearlySummary defines model for YearlySummary.
type YearlySummary struct {
	// MonthlyData Monthly success rates and statistics
	MonthlyData []struct {
		// BestPerformingGoal Goal with highest success rate in this month
		BestPerformingGoal *struct {
			GoalId      *string  `json:"goalId,omitempty"`
			GoalTitle   *string  `json:"goalTitle,omitempty"`
			SuccessRate *float32 `json:"successRate,omitempty"`
		} `json:"bestPerformingGoal,omitempty"`

		// GoalsTracked Number of goals tracked in this month
		GoalsTracked int `json:"goalsTracked"`

		// Month Month in YYYY-MM format
		Month string `json:"month"`

		// SuccessRate Overall success rate for the month
		SuccessRate float32 `json:"successRate"`

		// TotalMinutesSpent Total minutes spent across all goals
		TotalMinutesSpent int `json:"totalMinutesSpent"`
	} `json:"monthlyData"`
	OverallStats struct {
		// AverageSuccessRate Average success rate across all months
		AverageSuccessRate float32 `json:"averageSuccessRate"`

		// BestMonth Month with highest success rate
		BestMonth struct {
			Month       *string  `json:"month,omitempty"`
			SuccessRate *float32 `json:"successRate,omitempty"`
		} `json:"bestMonth"`

		// TotalMinutesSpent Total minutes spent across all goals for the year
		TotalMinutesSpent int `json:"totalMinutesSpent"`

		// WorstMonth Month with lowest success rate
		WorstMonth struct {
			Month       *string  `json:"month,omitempty"`
			SuccessRate *float32 `json:"successRate,omitempty"`
		} `json:"worstMonth"`
	} `json:"overallStats"`

	// Year The year this summary covers (YYYY format)
	Year string `json:"year"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// ListGoalsParams defines parameters for ListGoals.
type ListGoalsParams struct {
	// Tags Filter goals by tags (comma-separated)
	Tags *string `form:"tags,omitempty" json:"tags,omitempty"`

	// Active Filter by active goals (those within start/end date range)
	Active *bool `form:"active,omitempty" json:"active,omitempty"`
}

// CreateGoalJSONBody defines parameters for CreateGoal.
type CreateGoalJSONBody struct {
	// Description Detailed description of the goal
	Description *string `json:"description,omitempty"`

	// EndDate Optional end date of the goal
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// StartDate Start date of the goal
	StartDate openapi_types.Date `json:"startDate"`

	// Tags Tags for categorizing the goal
	Tags *[]string `json:"tags,omitempty"`

	// TargetMinutesPerDay Target number of minutes to spend on this goal per day
	TargetMinutesPerDay int `json:"targetMinutesPerDay"`

	// Title Title of the goal
	Title string `json:"title"`

	// UserId ID of the user creating the goal
	UserId string `json:"userId"`
}

// GetProgressParams defines parameters for GetProgress.
type GetProgressParams struct {
	// Month Month to retrieve progress for (format YYYY-MM)
	Month string `form:"month" json:"month"`

	// GoalId Optional filter to get progress for a specific goal only
	GoalId *string `form:"goalId,omitempty" json:"goalId,omitempty"`
}

// RecordProgressJSONBody defines parameters for RecordProgress.
type RecordProgressJSONBody struct {
	// Date Date for which progress is being recorded
	Date openapi_types.Date `json:"date"`

	// GoalId ID of the goal this progress is for
	GoalId string `json:"goalId"`

	// MinutesSpent Number of minutes spent on the goal
	MinutesSpent int `json:"minutesSpent"`

	// Note Optional note about the progress
	Note *string `json:"note,omitempty"`
}

// GetYearlySummaryParams defines parameters for GetYearlySummary.
type GetYearlySummaryParams struct {
	// Year Year to retrieve summary for (format YYYY)
	Year string `form:"year" json:"year"`

	// GoalId Optional filter to get summary for a specific goal only
	GoalId *string `form:"goalId,omitempty" json:"goalId,omitempty"`
}

// CreateGoalJSONRequestBody defines body for CreateGoal for application/json ContentType.
type CreateGoalJSONRequestBody CreateGoalJSONBody

// RecordProgressJSONRequestBody defines body for RecordProgress for application/json ContentType.
type RecordProgressJSONRequestBody RecordProgressJSONBody
